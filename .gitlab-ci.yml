stages:
  - install
  - build
  - deploy

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

install_dependencies:
  stage: install
  image: node:20-alpine
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/
  # Добавляем важное ограничение на хранение артефактов
  only:
    - main

build_job:
  stage: build
  image: node:20-alpine
  dependencies:
    - install_dependencies
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

# Важно: Используйте правильный образ для деплоя
deploy:
  stage: deploy
  image: node:20-alpine
  # Не используйте docker:dind. Это плохая практика для CI/CD.
  # Docker внутри CI лучше использовать для упаковки, а не для деплоя
  # См. альтернативы ниже
  script:
    # Сценарий деплоя зависит от вашего хостинга.
    # Пример для Netlify, Vercel или других статических хостингов:
    - echo "Deploying to Netlify..."
    - npx netlify-cli deploy # или аналогичный инструмент
    # Пример для S3:
    #- aws s3 cp dist/ s3://your-bucket-name/ --recursive
    #- echo "Deployed to S3."

  # Если вы используете docker, вы должны создать образ для вашего приложения
  # и использовать его для деплоя.
  # Пример:
  # - docker build -t my-app .
  # - docker push my-app
  # - docker run -d my-app
  # ... (используйте правильные команды для вашего серверного окружения)

  # Обязательно замените примеры на ваш сценарий деплоя!

  # Важно: Укажите правила запуска
  only:
    - main

variables:
  # Укажите переменные среды, необходимые для деплоя
  NETLIFY_TOKEN: $NETLIFY_TOKEN
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY

#  Дополнительные заметки:

#  -  Убедитесь, что переменные среды, используемые в скриптах деплоя,
#     правильно настроены в вашем GitLab CI/CD.

#  -  Для S3 используйте AWS CLI.

#  -  Для Netlify или Vercel, используйте соответствующие CLI или API.




















# stages:
#   - install
#   - build
#   - deploy

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - node_modules/

# install_dependencies:
#   stage: install
#   image: node:20-alpine
#   script:
#     - npm ci
#   artifacts:
#     paths:
#       - node_modules/

# build_job:
#   stage: build
#   image: node:20-alpine
#   dependencies:
#     - install_dependencies
#   script:
#     - npm run build
#   artifacts:
#     paths:
#       - dist/
#     expire_in: 1 week

# # Настройте деплой по своему — например, в Docker Hub, S3 или на сервер
# deploy:
#   stage: deploy
#   image: docker:24.0.6
#   services:
#     - docker:dind
#   dependencies:
#     - build_job
#   script:
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
#     - docker build -t your-docker-image:latest .
#     - docker push your-docker-image:latest
#   only:
#     - main